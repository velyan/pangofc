// This file was generated by gir (https://github.com/gtk-rs/gir @ 2bb6380)
// from gir-files (https://github.com/gtk-rs/gir-files @ 44fb091+)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(clippy::approx_constant, clippy::type_complexity, clippy::unreadable_literal)]

extern crate libc;
extern crate glib_sys as glib;
extern crate pango_sys as pango;
extern crate gobject_sys as gobject;
extern crate fontconfig as fontconfig_sys;
use fontconfig_sys::fontconfig as fontconfig;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, time_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Constants
pub const PANGO_FC_FONT_FEATURES: *const c_char = b"fontfeatures\0" as *const u8 as *const c_char;
pub const PANGO_FC_FONT_VARIATIONS: *const c_char = b"fontvariations\0" as *const u8 as *const c_char;
pub const PANGO_FC_GRAVITY: *const c_char = b"pangogravity\0" as *const u8 as *const c_char;
pub const PANGO_FC_PRGNAME: *const c_char = b"prgname\0" as *const u8 as *const c_char;
pub const PANGO_FC_VERSION: *const c_char = b"pangoversion\0" as *const u8 as *const c_char;

// Callbacks
pub type PangoFcDecoderFindFunc = Option<unsafe extern "C" fn(*mut fontconfig::FcPattern, gpointer) -> *mut PangoFcDecoder>;

// Records
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PangoFcDecoderClass {
    pub parent_class: gobject::GObjectClass,
    pub get_charset: Option<unsafe extern "C" fn(*mut PangoFcDecoder, *mut PangoFcFont) -> *mut fontconfig::FcCharSet>,
    pub get_glyph: Option<unsafe extern "C" fn(*mut PangoFcDecoder, *mut PangoFcFont, u32) -> pango::PangoGlyph>,
    pub _pango_reserved1: Option<unsafe extern "C" fn()>,
    pub _pango_reserved2: Option<unsafe extern "C" fn()>,
    pub _pango_reserved3: Option<unsafe extern "C" fn()>,
    pub _pango_reserved4: Option<unsafe extern "C" fn()>,
}

impl ::std::fmt::Debug for PangoFcDecoderClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("PangoFcDecoderClass @ {:?}", self as *const _))
         .field("get_charset", &self.get_charset)
         .field("get_glyph", &self.get_glyph)
         .field("_pango_reserved1", &self._pango_reserved1)
         .field("_pango_reserved2", &self._pango_reserved2)
         .field("_pango_reserved3", &self._pango_reserved3)
         .field("_pango_reserved4", &self._pango_reserved4)
         .finish()
    }
}

#[repr(C)]
pub struct _PangoFcFontClass(c_void);

pub type PangoFcFontClass = *mut _PangoFcFontClass;

#[repr(C)]
pub struct _PangoFcFontMapClass(c_void);

pub type PangoFcFontMapClass = *mut _PangoFcFontMapClass;

#[repr(C)]
pub struct _PangoFcFontMapPrivate(c_void);

pub type PangoFcFontMapPrivate = *mut _PangoFcFontMapPrivate;

// Classes
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PangoFcDecoder {
    pub parent_instance: gobject::GObject,
}

impl ::std::fmt::Debug for PangoFcDecoder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("PangoFcDecoder @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct PangoFcFont {
    pub parent_instance: pango::PangoFont,
    pub font_pattern: *mut fontconfig::FcPattern,
    pub fontmap: *mut pango::PangoFontMap,
    pub priv_: gpointer,
    pub matrix: pango::PangoMatrix,
    pub description: *mut pango::PangoFontDescription,
    pub metrics_by_lang: *mut glib::GSList,
    pub is_hinted: c_uint,
    _truncated_record_marker: c_void,
    // field is_transformed has incomplete type
}

impl ::std::fmt::Debug for PangoFcFont {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("PangoFcFont @ {:?}", self as *const _))
         .field("parent_instance", &self.parent_instance)
         .field("font_pattern", &self.font_pattern)
         .field("fontmap", &self.fontmap)
         .field("priv_", &self.priv_)
         .field("matrix", &self.matrix)
         .field("description", &self.description)
         .field("metrics_by_lang", &self.metrics_by_lang)
         .field("is_hinted", &self.is_hinted)
         .finish()
    }
}

#[repr(C)]
pub struct PangoFcFontMap(c_void);

impl ::std::fmt::Debug for PangoFcFontMap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("PangoFcFontMap @ {:?}", self as *const _))
         .finish()
    }
}

extern "C" {

    //=========================================================================
    // PangoFcDecoder
    //=========================================================================
    pub fn pango_fc_decoder_get_type() -> GType;
    pub fn pango_fc_decoder_get_charset(decoder: *mut PangoFcDecoder, fcfont: *mut PangoFcFont) -> *mut fontconfig::FcCharSet;
    pub fn pango_fc_decoder_get_glyph(decoder: *mut PangoFcDecoder, fcfont: *mut PangoFcFont, wc: u32) -> pango::PangoGlyph;

    //=========================================================================
    // PangoFcFont
    //=========================================================================
    pub fn pango_fc_font_get_type() -> GType;
    pub fn pango_fc_font_description_from_pattern(pattern: *mut fontconfig::FcPattern, include_size: gboolean) -> *mut pango::PangoFontDescription;
    pub fn pango_fc_font_get_glyph(font: *mut PangoFcFont, wc: u32) -> c_uint;
    pub fn pango_fc_font_get_unknown_glyph(font: *mut PangoFcFont, wc: u32) -> pango::PangoGlyph;
    pub fn pango_fc_font_has_char(font: *mut PangoFcFont, wc: u32) -> gboolean;
    pub fn pango_fc_font_kern_glyphs(font: *mut PangoFcFont, glyphs: *mut pango::PangoGlyphString);
    pub fn pango_fc_font_unlock_face(font: *mut PangoFcFont);

    //=========================================================================
    // PangoFcFontMap
    //=========================================================================
    pub fn pango_fc_font_map_get_type() -> GType;
    pub fn pango_fc_font_map_add_decoder_find_func(fcfontmap: *mut PangoFcFontMap, findfunc: PangoFcDecoderFindFunc, user_data: gpointer, dnotify: glib::GDestroyNotify);
    pub fn pango_fc_font_map_cache_clear(fcfontmap: *mut PangoFcFontMap);
    pub fn pango_fc_font_map_config_changed(fcfontmap: *mut PangoFcFontMap);
    pub fn pango_fc_font_map_create_context(fcfontmap: *mut PangoFcFontMap) -> *mut pango::PangoContext;
    pub fn pango_fc_font_map_find_decoder(fcfontmap: *mut PangoFcFontMap, pattern: *mut fontconfig::FcPattern) -> *mut PangoFcDecoder;
    pub fn pango_fc_font_map_get_config(fcfontmap: *mut PangoFcFontMap) -> *mut fontconfig::FcConfig;
    pub fn pango_fc_font_map_set_config(fcfontmap: *mut PangoFcFontMap, fcconfig: *mut fontconfig::FcConfig);
    pub fn pango_fc_font_map_shutdown(fcfontmap: *mut PangoFcFontMap);

}
